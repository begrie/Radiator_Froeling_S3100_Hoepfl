#!  /bin/bash

SCRIPT_HOME="$(dirname "$0")"
[ -e "$HOME/.analysestreamrc" ] && source "$HOME/.analysestreamrc"
[ -e "$SCRIPT_HOME/analyseStream.conf" ] && source "$SCRIPT_HOME/analyseStream.conf"
[ -e "@sysconfdir@/analyseStream.conf" ] && source "@sysconfdir@/analyseStream.conf"

if [ -z "$MAIL_FROM" -o -z "$MAIL_TO" ] ; then
   echo "\$HOME/.analysestreamrc, $SCRIPT_HOME/analyseStream.conf," >&2
   echo "or @sysconfdir@/analyseStream.conf must set MAIL_FROM and MAIL_TO" >&2
   echo "" >&2
   echo "Example analyseStream.conf:" >&2
   echo "" >&2
   echo "   MAIL_FROM='<heizung@example.com>'" >&2
   echo "   MAIL_TO='<janitor@example.com>'" >&2
   echo "" >&2
   exit 1
fi

send_error_mail() {
   local ERROR_TIME="$1"
   local ERROR_DESCRIPTION="$2"
   eval "declare -A RAWVALUES="${3#*=}

   (
   echo "From: $MAIL_FROM"
   echo "To: $MAIL_TO"
   echo "Subject: Heizung: =?iso-8859-1?Q?St=F6rung?="
   echo "Date: $(date -R)"
   echo "Content-Transfer-Encoding: 8bit"
   echo "Content-Type: text/plain; charset=\"UTF-8\""
   echo ""
   echo "Hallo,"
   echo ""
   echo "Die Heizung ist hat eine StÃ¶rung gemeldet!"
   echo ""
   echo "   $ERROR_TIME"
   echo "   $ERROR_DESCRIPTION"
   echo ""

   DISPLAY1=$(echo "${RAWVALUES[0]}" | sed -e 's/.*= .//' -e 's/\] \[[SON]\] *([0-9]*) *$//')
   DISPLAY2=$(echo "${RAWVALUES[1]}" | sed -e 's/.*= .//' -e 's/\] \[[SON]\] *([0-9]*) *$//')
   echo "             .-----------------,"
   printf "             | %15s |\n" "$DISPLAY1"
   printf "             | %15s |\n" "$DISPLAY2"
   echo "             \`-----------------'"
   echo ""
   echo "Aktuelle Messwerte:"
   echo ""
   for i in {2..29}; do
      V=$(echo "${RAWVALUES[$i]}" | sed -e 's/^.VALUE. .. //' -e 's/.\[[SON]\] ([0-9]*)$//')
      LABEL=$(echo "$V" | cut -d = -f 1 | sed -e 's/^.//' -e 's/. *$//')
      VALUE=$(echo "$V" | cut -d = -f 2 | sed -e 's/^ *.//' -e 's/. *$//')
      printf "%25s %6s\n" "$LABEL" "$VALUE"
   done
   ) | sendmail "$MAIL_TO" >/dev/null 2>&1
}

TIMESTAMP=""
while read X; do
   if [[ "$X" =~ ^\[TIME\]\ [A-Za-z]*,\ ([-0-9]*),\ ([:0-9]*) ]] ; then
      TIMESTAMP="${BASH_REMATCH[1]} ${BASH_REMATCH[2]}"
   fi

   if [[ "$X" =~ ^\[ERROR\]\ (...,\ ....-..-..,\ ..:..:..):\ (.*) ]] ; then
      ERROR_TIME="${BASH_REMATCH[1]}"
      ERROR_DESC="${BASH_REMATCH[2]}"
      send_error_mail "${BASH_REMATCH[1]}" "${BASH_REMATCH[2]}" "$(declare -p OLD_RAW_VALUES)"
   fi

   if [ -n "$TIMESTAMP" ] ; then
      if [[ "$X" =~ ^\[VALUE\]\ 0*([0-9a-f]+)\ \[([^]]*)\]\ =\ \[([^]]*)\]\ \[(.)\] ]] ; then
         KEY="${BASH_REMATCH[1]}"
         NAME="${BASH_REMATCH[2]}"
         VALUE="${BASH_REMATCH[3]}"
         TYPE="${BASH_REMATCH[4]}"

         PRINTVALUES[$KEY]="$VALUE"
         RAWVALUES[$KEY]="$X"

         if [ "$TYPE" = "N" ] ; then
            VALUES[$KEY]="${VALUE//[^-0-9.]*/}"
         else
            VALUES[$KEY]="'$VALUE'"
         fi
      fi

      if [[ "$X" =~ ^$ ]] ; then
         echo -n "INSERT INTO Measurement VALUES('$TIMESTAMP'"
         for i in {0..29}; do
            echo -n ", ${VALUES[$i]}"
         done
         echo ");"

         temp=$(declare -p RAWVALUES)
         eval "${temp/RAWVALUES=/OLD_RAW_VALUES=}"

         unset VALUES
         unset PRINTVALUES
         unset RAWVALUES
      fi
   fi
done
