#!  /usr/bin/env python2
# -*- coding: UTF-8 -*-

import os
import sys
import re
import time
import subprocess

if len(sys.argv) != 2:
   sys.stderr.write(sys.argv[0] + " <path to RRD file>")
   sys.stderr.write("\n")
   sys.exit(1)
RRD=sys.argv[1]

valueCleanupRE = re.compile(r"[^-0-9.]*")

timestampRE = re.compile(r"^\[TIME\] [A-Za-z]*, ([-0-9]*), ([:0-9]*)")
timestamp = None

valueRE = re.compile(r"^\[VALUE\] 0*([0-9]+) \[[^]]*\] = \[([^]]*)] \[(.)\] \(([-0-9]*)\)")
values = {}
while True:
   line = sys.stdin.readline()
   if not line: break # EOF
   try:
      line = line.decode('utf-8')
   except:
      sys.stdout.write("Failed to UTF-8-decode line <")
      sys.stdout.write(line)
      sys.stdout.write(">\n")
      sys.stdout.flush()
      line = ""

   timestamp_match = timestampRE.match(line)
   if timestamp_match:
      timestamp=timestamp_match.group(1) + " " + timestamp_match.group(2)
      unixtime=int(time.mktime(time.strptime(timestamp, "%Y-%m-%d %H:%M:%S")))

   if timestamp:
      value_match=valueRE.match(line)
      if value_match:
         key=int(value_match.group(1))
         value=value_match.group(2)
         typ=value_match.group(3)
         numbervalue=value_match.group(4)

         if typ == "N":
            values[key] = valueCleanupRE.sub("", value)
         else:
            values[key] = numbervalue

      if len(line) == 1:
         try:
            DS = str(unixtime) + ":" + ":".join("%s" % (value) for (key, value) in sorted(values.items()))
            subprocess.check_output(["rrdtool",
                                    "update",
                                    RRD,
                                    DS])
         except OSError, e:
            sys.stderr.write("Failed to call rrdtool: " + e.strerror + "\n")
            pass
         except subprocess.CalledProcessError, e:
            sys.stderr.write("Failed to call rrdtool: " + e.output + "\n")
            pass

         values.clear()
         timestamp=None
